HELP_MESSAGE = """
This is a simple script for creating and deleting experiments
in the Microsoft SQL database.

This utility offers three commands:

- new-experiment -f [filename]:
    This adds a new experiment to the database using the
    parameters given in the config file supplied

- delete-experiment -f [filename]:
    This removes an experiment from the database using the
    experiment name given in the config file

- help:
    This prints the help message you are currently looking at :)
"""

import builtins
import pyodbc
import sys
import tomllib

# Database authentication
DB_ADDR = "test"
DB_NAME = "test"
DB_UID = "user"
DB_PWD = "password"


def handle_database(func):
    """
    Decorator function for any function which connects to the database

    This decorator handles database connections, commits, and
    disconnection. It should be applied to every function which wants
    to make changes to the database.

    Notes:
    Any function which uses this wrapper must take a 
    """
    def wrapper(*args):
        conn = pyodbc.connect(
            "DRIVER={ODBC Driver 18 for SQL Server};"
            f"SERVER={DB_ADDR}"
            f"DATABASE={DB_NAME}"
            f"UID={DB_UID}"
            f"PWD={DB_PWD}"
        )
        cursor = conn.cursor()

        result = func(*args, cursor=cursor)

        conn.commit()
        conn.close()

        return result

    return wrapper


""" Utils """

def fix_sql_value_types(value):
    """
    Converts Python values to their appropriate SQL types.
    THIS NEEDS TO BE USED FOR ANY VALUE INSERTED INTO THE
    DATABASE.

    args:
    - value: the value whose type will be converted.

    This means converting boolean values into integer values,
    and then all values are converted to strings
    """
    match type(value):
        case builtins.bool:
            return str(int(value))
        case builtins.str:
            return "'" + value + "'"
        case _:
            return str(value)


def get_experiment_id(cursor: pyodbc.Cursor, user_defined_id: str) -> int:
    """
    Gets the numeric experiment ID from the database

    args:
    - cursor: the database cursor
    - user_defined_id: the string id of the experiment

    returns:
    the numeric experiment ID, or throws an error
    """
    query = "SELECT * FROM Experiments WHERE UserDefinedID = " + user_defined_id

    return cursor.execute(query).fetchone()


def load_experiment_config(flags: {str : str}) -> dict:
    """
    Gets the config filename and loads the experiment config

    args:
    - flags: the flags dictionary generated by parse_arguments()

    returns:
    The experiment config, or raises an error if:
    1. 'flags' does not contain a filename
    2. An IO error occurs in trying to open the filename
    """
    if (filename := flags.get("-f")) is not None:
        with open(filename, "rb") as f:
            return tomllib.load(f)

    raise KeyError("No config filename given")


def parse_arguments(argument_list: [str]) -> ([str], {str : str}):
    """
    Turns the argument list into a list of sequential arguments
    and a dictionary of flags with their keys.

    args:
    - argument_list: the list of arguments to parse
    """
    sequential = []
    flags_dict = {}
    index = 0

    while index < len(argument_list):
        if (arg := argument_list[index])[0] == "-":
            if index + 1 < len(argument_list):
                flags_dict[arg] = argument_list[index + 1]
            else:
                raise EOFError(f"flag '{arg}' has no corresponding value")

            index += 2
        else:
            sequential.append(arg)
            index += 1

    return sequential, flags_dict


""" Database interaction """

@handle_database
def create_new_experiment(flags: {str : str}, cursor: pyodbc.Cursor = None):
    """
    Adds a new experiment to the database
    
    args:
    - flags: the key/value flags from the command line arguments
    - cursor: a named parameter which is passed to the function
      by the @handle_database decorator, which represents a handle
      to the database

    This method will raise an exception if the config file doesn't
    contain the required parameters
    """

    config = load_experiment_config(flags)

    # Add experiment info
    info_field_names  = config["info"].keys()
    info_field_values = [fix_sql_value_types(v) for v in config["info"].values()]
    cursor.execute(
        f"INSERT INTO Experiments ({info_field_names}) "
        f"VALUES ({info_field_values})"
    )

    # get experiment ID
    user_defined_id = config["info"]["UserdefinedID"]
    experiment_id = get_experiment_id(cursor, user_defined_id)

    # Add experiment parameters
    parameters = list(config["parameters"].items())
    cursor.execute(
        "INSERT INTO ExperimentParameters "
        "(ExperimentID, ParameterName, ParamValueTxt) VALUES"
        f"({experiment_id}, ?, ?)",
        parameters
    )


@handle_database
def delete_experiment(flags: {str : str}, cursor: pyodbc.Cursor = None):
    """
    Removes an experiment from the database 

    args:
    - flags: the key/value flags from the command line arguments
    - cursor: a named parameter which is passed to the function
      by the @handle_database decorator, which represents a handle
      to the database

    This method raises an exception if the UserDefinedID is not found
    in the database
    """
    raise NotImplementedError("I need to read David's 'DeleteExperiment' macro")

    config = load_experiment_config(flags)

    user_defined_id = config["info"]["UserDefinedID"]
    experiment_id = get_experiment_id(cursor, user_defined_id)

    cursor.execute("DELETE FROM Experiments WHERE UserDefinedID = ?", user_defined_id)
    cursor.execute("DELETE FROM ExperimentParameters WHERE ExperimentID = ?", experiment_id)


# @handle_database
# def restore_experiment(config: dict, )


if __name__ == "__main__":
    args, flags = parse_arguments(sys.argv[1:])

    match args:
        case ["new-experiment"]:
            create_new_experiment(flags)
        case ["delete-experiment"]:
            delete_experiment(flags)
        case ["help"]:
            print(HELP_MESSAGE)
        case [command]:
            raise EnvironmentError(f"Unknown command {command}\n\n{HELP_MESSAGE}")
        case []:
            raise EnvironmentError(f"No command given\n\n{HELP_MESSAGE}")
        case _:
            raise EnvironmentError(f"Too many arguments\n\n{HELP_MESSAGE}")
